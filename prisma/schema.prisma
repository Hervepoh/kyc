// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// enum StatusType {
//   PENDING
//   VALIDATED
//   REJECTED
//   INTEGRATED
//   CANCELED
// }

model KYCForm {
  id             String    @id @default(uuid())
  status         String    @default("PENDING")
  contractNumber String
  fullName       String
  firstName      String
  lastName       String
  gender         String
  usageType      String
  dateOfBirth    DateTime?

  // Identity document
  idType           String
  idNumber         String
  idValidityDate   DateTime?
  idFrontImagePath String?
  idBackImagePath  String?
  // NIU
  niuNumber        String?
  niuFilePath      String?
  // Contact information
  email            String
  customerStatus   String?

  // Location
  locationReference String?
  gpsCoordinates    String?

  // Meter details
  meterNumber          String?
  meterCharacteristics String?
  meterType            String
  itineraryNumber      String?
  transformerPower     String?
  voltage              String?
  meterStatus          String
  activity             String?

  // Related models
  otherContracts OtherContract[]
  phoneNumbers   PhoneNumber[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OtherContract {
  id        String  @id @default(uuid())
  number    String
  kycFormId String
  kycForm   KYCForm @relation(fields: [kycFormId], references: [id], onDelete: Cascade)
}

model PhoneNumber {
  id         String  @id @default(uuid())
  number     String
  isWhatsapp Boolean @default(false)
  kycFormId  String
  kycForm    KYCForm @relation(fields: [kycFormId], references: [id], onDelete: Cascade)
}

model Notification {
  id        Int       @id @default(autoincrement())
  userId    String?
  email     String?
  phone     String?
  method    String
  subject   String
  message   String
  template  String?
  status    String    @default("unread")
  sent      Boolean   @default(false)
  sentAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("notifications")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?       @map("email_verified")
  image         String?
  password      String
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  audits        Audit[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Audit {
  id        Int      @id @default(autoincrement())
  userId    String?
  ipAddress String?
  action    String
  details   String
  endpoint  String
  createdAt DateTime @default(now())
  source    String
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("audits")
}
